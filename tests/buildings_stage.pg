------------------------------------------------------------------------------
-- Provide unit testing for buildings_stage schema using pgTAP
------------------------------------------------------------------------------

-- Turn off echo.
\set QUIET 1

-- Format the output nicely.
\pset format unaligned
\pset tuples_only true
\pset pager

-- Revert all changes on failure.
\set ON_ERROR_ROLLBACK 1
\set ON_ERROR_STOP true


BEGIN;

SELECT plan(42);

-- Tests
SELECT has_schema('buildings_stage');

-- Lookup Tables
SELECT has_table('buildings_stage', 'organisation', 'Should have organisation table in the buildings_stage schema.');
SELECT has_table('buildings_stage', 'qa_status', 'Should have qa_status table in the buildings_stage schema.');

-- Data Tables
SELECT has_table('buildings_stage', 'supplied_datasets', 'Should have supplied_datasets table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'supplied_datasets', 'idx_supplied_datasets_supplier_id', 'supplier_id',
    'Should have index on the supplier_id column of the supplied_datasets table.'
);

SELECT has_table('buildings_stage', 'supplied_outlines', 'Should have supplied_outlines table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'supplied_outlines', 'idx_supplied_outlines_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the supplied_outlines table.'
);
SELECT has_index(
    'buildings', 'supplied_outlines', 'shx_supplied_outlines', 'shape',
    'Should have spatial index on the shape column of the supplied_outlines table.'
);

SELECT has_table('buildings_stage', 'existing_subset_extracts', 'Should have existing_subset_extracts table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'existing_subset_extracts', 'idx_existing_subset_extracts_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the existing_subset_extracts table.'
);
SELECT has_index(
    'buildings', 'existing_subset_extracts', 'shx_existing_subset_extracts', 'shape',
    'Should have spatial index on the shape column of the existing_subset_extracts table.'
);

SELECT has_table('buildings_stage', 'new', 'Should have new table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'new', 'idx_new_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the new table.'
);
SELECT has_index(
    'buildings', 'new', 'shx_new', 'shape',
    'Should have spatial index on the shx_new column of the new table.'
);

SELECT has_table('buildings_stage', 'removed', 'Should have removed table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'removed', 'idx_removed_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the removed table.'
);
SELECT has_index(
    'buildings', 'removed', 'idx_removed_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the removed table.'
);
SELECT has_index(
    'buildings', 'removed', 'shx_removed', 'shape',
    'Should have index on the shape column of the removed table.'
);

SELECT has_table('buildings_stage', 'merged', 'Should have merged table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'merged', 'idx_merged_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the merged table.'
);
SELECT has_index(
    'buildings', 'merged', 'idx_merged_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the merged table.'
);
SELECT has_index(
    'buildings', 'merged', 'shx_merged', 'shape',
    'Should have index on the shape column of the merged table.'
);

SELECT has_table('buildings_stage', 'merge_candidates', 'Should have merge_candidates table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'merge_candidates', 'idx_merge_candidates_supplied_outline_id', 'supplied_outline_id',
    'Should have index on the supplied_outline_id column of the merge_candidates table.'
);
SELECT has_index(
    'buildings', 'merge_candidates', 'idx_merge_candidates_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the merge_candidates table.'
);

SELECT has_table('buildings_stage', 'split', 'Should have split table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'split', 'idx_split_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the split table.'
);
SELECT has_index(
    'buildings', 'split', 'idx_split_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the split table.'
);
SELECT has_index(
    'buildings', 'split', 'shx_split', 'shape',
    'Should have index on the shape column of the split table.'
);

SELECT has_table('buildings_stage', 'split_candidates', 'Should have split_candidates table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'split_candidates', 'idx_split_candidates_supplied_outline_id', 'supplied_outline_id',
    'Should have index on the supplied_outline_id column of the split_candidates table.'
);
SELECT has_index(
    'buildings', 'split_candidates', 'idx_split_candidates_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the split_candidates table.'
);

SELECT has_table('buildings_stage', 'best_candidates', 'Should have best_candidates table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'best_candidates', 'idx_best_candidates_building_outline_id', 'building_outline_id',
    'Should have index on the building_outline_id column of the best_candidates table.'
);
SELECT has_index(
    'buildings', 'best_candidates', 'idx_best_candidates_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the best_candidates table.'
);
SELECT has_index(
    'buildings', 'best_candidates', 'idx_best_candidates_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the best_candidates table.'
);
SELECT has_index(
    'buildings', 'best_candidates', 'shx_best_candidates', 'shape',
    'Should have index on the shape column of the best_candidates table.'
);

SELECT has_table('buildings_stage', 'check_candidates', 'Should have check_candidates table in the buildings_stage schema.');
SELECT has_index(
    'buildings', 'check_candidates', 'idx_check_candidates_building_outline_id', 'building_outline_id',
    'Should have index on the building_outline_id column of the check_candidates table.'
);
SELECT has_index(
    'buildings', 'check_candidates', 'idx_check_candidates_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the check_candidates table.'
);
SELECT has_index(
    'buildings', 'check_candidates', 'idx_check_candidates_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the check_candidates table.'
);
SELECT has_index(
    'buildings', 'check_candidates', 'shx_check_candidates', 'shape',
    'Should have index on the shape column of the check_candidates table.'
);

-- Finish pgTAP testing
SELECT * FROM finish();

ROLLBACK;
