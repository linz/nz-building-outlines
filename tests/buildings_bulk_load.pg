------------------------------------------------------------------------------
-- Provide unit testing for buildings_bulk_load schema using pgTAP
------------------------------------------------------------------------------

-- Turn off echo.
\set QUIET 1

-- Format the output nicely.
\pset format unaligned
\pset tuples_only true
\pset pager

-- Revert all changes on failure.
\set ON_ERROR_ROLLBACK 1
\set ON_ERROR_STOP true


BEGIN;

CREATE EXTENSION IF NOT EXISTS pgtap;

SELECT plan(29);

-- Tests
SELECT has_schema('buildings_bulk_load');

-- Lookup Tables
SELECT has_table('buildings_bulk_load', 'organisation', 'Should have organisation table in the buildings_bulk_load schema.');
SELECT has_table('buildings_bulk_load', 'qa_status', 'Should have qa_status table in the buildings_bulk_load schema.');

-- Data Tables
SELECT has_table('buildings_bulk_load', 'supplied_datasets', 'Should have supplied_datasets table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'supplied_datasets', 'idx_supplied_datasets_supplier_id', 'supplier_id',
    'Should have index on the supplier_id column of the supplied_datasets table.'
);

SELECT has_table('buildings_bulk_load', 'bulk_load_outlines', 'Should have bulk_load_outlines table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'bulk_load_outlines', 'idx_bulk_load_outlines_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the bulk_load_outlines table.'
);
SELECT has_index(
    'buildings_bulk_load', 'bulk_load_outlines', 'idx_bulk_load_outlines_bulk_load_status_id', 'bulk_load_status_id',
    'Should have index on the bulk_load_status_id column of the bulk_load_outlines table.'
);
SELECT has_index(
    'buildings_bulk_load', 'bulk_load_outlines', 'idx_bulk_load_outlines_capture_method_id', 'capture_method_id',
    'Should have index on the capture_method_id column of the bulk_load_outlines table.'
);
SELECT has_index(
    'buildings_bulk_load', 'bulk_load_outlines', 'idx_bulk_load_outlines_capture_source_id', 'capture_source_id',
    'Should have index on the capture_source_id column of the bulk_load_outlines table.'
);
SELECT has_index(
    'buildings_bulk_load', 'bulk_load_outlines', 'shx_bulk_load_outlines', 'shape',
    'Should have spatial index on the shape column of the bulk_load_outlines table.'
);
SELECT ok(nextval('buildings_bulk_load.bulk_load_outlines_bulk_load_outline_id_seq') > 999999);

SELECT has_table('buildings_bulk_load', 'existing_subset_extracts', 'Should have existing_subset_extracts table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'existing_subset_extracts', 'idx_existing_subset_extracts_supplied_dataset_id', 'supplied_dataset_id',
    'Should have index on the supplied_dataset_id column of the existing_subset_extracts table.'
);
SELECT has_index(
    'buildings_bulk_load', 'existing_subset_extracts', 'shx_existing_subset_extracts', 'shape',
    'Should have spatial index on the shape column of the existing_subset_extracts table.'
);

SELECT has_table('buildings_bulk_load', 'added', 'Should have added table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'added', 'idx_added_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the added table.'
);

SELECT has_table('buildings_bulk_load', 'removed', 'Should have removed table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'removed', 'idx_removed_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the removed table.'
);

SELECT has_table('buildings_bulk_load', 'related', 'Should have related table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'related', 'idx_related_bulk_load_outline_id', 'bulk_load_outline_id',
    'Should have index on the bulk_load_outline_id column of the related table.'
);
SELECT has_index(
    'buildings_bulk_load', 'related', 'idx_related_building_outline_id', 'building_outline_id',
    'Should have index on the building_outline_id column of the related table.'
);
SELECT has_index(
    'buildings_bulk_load', 'related', 'idx_related_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the related table.'
);

SELECT has_table('buildings_bulk_load', 'matched', 'Should have matched table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'matched', 'idx_matched_building_outline_id', 'building_outline_id',
    'Should have index on the building_outline_id column of the matched table.'
);
SELECT has_index(
    'buildings_bulk_load', 'matched', 'idx_matched_qa_status_id', 'qa_status_id',
    'Should have index on the qa_status_id column of the matched table.'
);

SELECT has_table('buildings_bulk_load', 'transferred', 'Should have transferred table in the buildings_bulk_load schema.');
SELECT has_index(
    'buildings_bulk_load', 'transferred', 'idx_transferred_new_building_outline_id', 'new_building_outline_id',
    'Should have index on the new_building_outline_id column of the transferred table.'
);

SELECT has_table('buildings_bulk_load', 'deletion_description', 'Should have deletion_description table in the buildings_bulk_load schema.');

-- Finish pgTAP testing
SELECT * FROM finish();

ROLLBACK;
