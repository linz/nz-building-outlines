------------------------------------------------------------------------------
-- Provide unit testing for buildings_reference schema using pgTAP
------------------------------------------------------------------------------

-- Turn off echo.
\set QUIET 1

-- Format the output nicely.
\pset format unaligned
\pset tuples_only true
\pset pager

-- Revert all changes on failure.
\set ON_ERROR_ROLLBACK 1
\set ON_ERROR_STOP true


BEGIN;

CREATE EXTENSION IF NOT EXISTS pgtap;

SELECT plan(39);

-- Schema
SELECT has_schema('buildings_reference');

-- Table and index
SELECT has_table('buildings_reference', 'suburb_locality', 'Should have suburb_locality table in the buildings_reference schema.');

SELECT has_table('buildings_reference', 'town_city', 'Should have town_city table in the buildings_reference schema.');

SELECT has_table('buildings_reference', 'territorial_authority', 'Should have territorial_authority table in the buildings_reference schema.');

SELECT has_table('buildings_reference', 'capture_source_area', 'Should have capture_source_area table in the buildings_reference schema.');

SELECT has_table('buildings_reference', 'coastlines_and_islands', 'Should have coastlines_and_islands table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'coastlines_and_islands', 'shx_coastlines_and_islands', 'shape',
    'Should have spatial index on the shape column of the coastlines_and_islands table.'
);

SELECT has_table('buildings_reference', 'river_polygons', 'Should have river_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'river_polygons', 'shx_river_polygons', 'shape',
    'Should have spatial index on the shape column of the river_polygons table.'
);

SELECT has_table('buildings_reference', 'lake_polygons', 'Should have lake_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'lake_polygons', 'shx_lake_polygons', 'shape',
    'Should have spatial index on the shape column of the lake_polygons table.'
);

SELECT has_table('buildings_reference', 'pond_polygons', 'Should have pond_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'pond_polygons', 'shx_pond_polygons', 'shape',
    'Should have spatial index on the shape column of the pond_polygons table.'
);

SELECT has_table('buildings_reference', 'swamp_polygons', 'Should have swamp_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'swamp_polygons', 'shx_swamp_polygons', 'shape',
    'Should have spatial index on the shape column of the swamp_polygons table.'
);

SELECT has_table('buildings_reference', 'lagoon_polygons', 'Should have lagoon_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'lagoon_polygons', 'shx_lagoon_polygons', 'shape',
    'Should have spatial index on the shape column of the lagoon_polygons table.'
);

SELECT has_table('buildings_reference', 'canal_polygons', 'Should have canal_polygons table in the buildings_reference schema.');
SELECT has_index(
    'buildings_reference', 'canal_polygons', 'shx_canal_polygons', 'shape',
    'Should have spatial index on the shape column of the canal_polygons table.'
);

SELECT has_table('buildings_reference', 'hut_points', 'Should have hut_points table in the buildings_reference_schema.');
SELECT has_index(
    'buildings_reference', 'hut_points', 'shx_hut_points', 'shape',
    'Should have spatial index on the shape column of the hut_points table.'
);

SELECT has_table('buildings_reference', 'shelter_points', 'Should have shelter_points table in the buildings_reference_schema.');
SELECT has_index(
    'buildings_reference', 'shelter_points', 'shx_shelter_points', 'shape',
    'Should have spatial index on the shape column of the shelter_points table.'
);

SELECT has_table('buildings_reference', 'bivouac_points', 'Should have bivouac_points table in the buildings_reference_schema.');
SELECT has_index(
    'buildings_reference', 'bivouac_points', 'shx_bivouac_points', 'shape',
    'Should have spatial index on the shape column of the bivouac_points table.'
);

SELECT has_table('buildings_reference', 'protected_areas', 'Should have protected_areas table in the buildings_reference_schema.');
SELECT has_index(
    'buildings_reference', 'protected_areas', 'shx_protected_areas', 'shape',
    'Should have spatial index on the shape column of the protected_areas table.'
);

SELECT has_table('buildings_reference', 'reference_update_log', 'Should have reference_update_log table in the buildings_reference schema.');

SELECT has_function('buildings_reference', 'canal_polygons_delete_by_external_id', 'Should have function canal_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'canal_polygons_update_shape_by_external_id', 'Should have function canal_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'canal_polygons_insert', 'Should have function canal_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'lagoon_polygons_delete_by_external_id', 'Should have function lagoon_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'lagoon_polygons_update_shape_by_external_id', 'Should have function lagoon_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'lagoon_polygons_insert', 'Should have function lagoon_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'lake_polygons_delete_by_external_id', 'Should have function lake_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'lake_polygons_update_shape_by_external_id', 'Should have function lake_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'lake_polygons_insert', 'Should have function lake_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'pond_polygons_delete_by_external_id', 'Should have function pond_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'pond_polygons_update_shape_by_external_id', 'Should have function pond_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'pond_polygons_insert', 'Should have function pond_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'river_polygons_delete_by_external_id', 'Should have function river_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'river_polygons_update_shape_by_external_id', 'Should have function river_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'river_polygons_insert', 'Should have function river_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'swamp_polygons_delete_by_external_id', 'Should have function swamp_polygons_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'swamp_polygons_update_shape_by_external_id', 'Should have function swamp_polygons_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'swamp_polygons_insert', 'Should have function swamp_polygons_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'reference_update_log_insert_log', 'Should have function reference_update_log_insert_log in buildings_reference.');

SELECT has_function('buildings_reference', 'hut_points_delete_by_external_id', 'Should have function hut_points_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'hut_points_update_shape_by_external_id', 'Should have function hut_points_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'hut_points_insert', 'Should have function hut_points_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'shelter_points_delete_by_external_id', 'Should have function shelter_points_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'shelter_points_update_shape_by_external_id', 'Should have function shelter_points_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'shelter_points_insert', 'Should have function shelter_points_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'bivouac_points_delete_by_external_id', 'Should have function bivouac_points_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'bivouac_points_update_shape_by_external_id', 'Should have function bivouac_points_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'bivouac_points_insert', 'Should have function bivouac_points_insert in buildings_reference.');

SELECT has_function('buildings_reference', 'protected_areas_delete_by_external_id', 'Should have function protected_areas_delete_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'protected_areas_update_shape_by_external_id', 'Should have function protected_areas_update_shape_by_external_id in buildings_reference.');
SELECT has_function('buildings_reference', 'protected_areas_insert', 'Should have function protected_areas_insert in buildings_reference.');

-- Finish pgTAP testing
SELECT * FROM finish();

ROLLBACK;
