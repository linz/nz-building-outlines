#!/bin/sh

DB_NAME=
WITH_TEST_DATA=false
WITH_PLUGIN_SETUP=false
export PSQL=psql
export SCRIPTSDIR=/usr/share/nz-buildings/

usage() {
    echo "Usage: $0 <database> [--with-test-data]" >&2
    echo "Usage: $0 <database> [--with-plugin-setup]" >&2
    echo "Usage: $0 [--version]" >&2
}

# Check that at least one argument has been supplied, if not print usage
if [ -z "$1" ]; then
    usage
    exit 1
fi

# Supporting version and help commands
if test "$1" = "--version"; then
    echo "@@VERSION@@"
    exit 0
fi

if test "$1" = "-v"; then
    echo "@@VERSION@@"
    exit 0
fi

if test "$1" = "--help"; then
    usage
    exit 0
fi

if test "$1" = "-h"; then
    usage
    exit 0
fi

# Support an environment variable for the script directory
if test -n "${BUILDINGSCHEMA_SQLDIR}"; then
    SCRIPTSDIR=${BUILDINGSCHEMA_SQLDIR}
fi

if test ! -f "${SCRIPTSDIR}/sql/buildings/01-create-schema-and-tables.sql"; then
    cat >&2 <<EOF
Cannot find /sql/buildings/01-create-schema-and-tables.sql in ${SCRIPTSDIR}
Please set BUILDINGSCHEMA_SQLDIR environment variable
EOF
    exit 1
fi

DB_NAME=$1; shift

# Check that the target database actually exists
if ! psql -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    echo "Could not find database: ${DB_NAME}" >&2
    exit 1
fi

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    case $PARAM in
        --with-test-data)
            WITH_TEST_DATA=true
            ;;
        --with-plugin-setup)
            WITH_PLUGIN_SETUP=true
            ;;
        *)
            # Anything unsupported that follows a valid database name will error out here
            echo "ERROR: Unrecognised option \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done

export PGDATABASE=$DB_NAME

psql -c "DROP SCHEMA IF EXISTS buildings_lds CASCADE;"
psql -c "DROP SCHEMA IF EXISTS buildings_bulk_load CASCADE;"
psql -c "DROP SCHEMA IF EXISTS buildings CASCADE;"
psql -c "DROP SCHEMA IF EXISTS buildings_common CASCADE"
psql -c "DROP SCHEMA IF EXISTS buildings_reference CASCADE;"

psql -c "CREATE EXTENSION IF NOT EXISTS postgis SCHEMA public;"
# intarray is used in compare_buildings.sql for array sorting
psql -c "CREATE EXTENSION IF NOT EXISTS intarray SCHEMA public;"
psql -c "SET client_min_messages TO WARNING;"

export ON_ERROR_STOP="--set ON_ERROR_STOP=true"

psql_exit() {
    psql_exit_status=$?
    if [ "$psql_exit_status" != "0" ]; then
        exit "$psql_exit_status"
    fi
}

# create test admin_bdys schema


if [ "${WITH_TEST_DATA}" = true ]; then
    psql -c "DROP SCHEMA IF EXISTS admin_bdys CASCADE;"
    echo ${SCRIPTSDIR}/tests/testdata/create_test_admin_bdys_schema.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/create_test_admin_bdys_schema.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/admin_bdys.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/admin_bdys.sql $ON_ERROR_STOP
    psql -c "DROP SCHEMA IF EXISTS aerial_lds CASCADE;"
    echo ${SCRIPTSDIR}/tests/testdata/create_test_aerial_schema.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/create_test_aerial_schema.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/aerial_lds.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/aerial_lds.sql $ON_ERROR_STOP

    # Execute schema and table files
    for s in buildings_common buildings_reference buildings buildings_lds
    do
        for file in ${SCRIPTSDIR}/sql/"$s"/01*.sql; do
            echo ${file} >&2
            psql -f ${file} $ON_ERROR_STOP
            psql_exit
        done
    done

    echo ${SCRIPTSDIR}/sql/buildings_bulk_load/01-create-schema-and-tables.sql; >&2
    psql -f ${SCRIPTSDIR}/sql/buildings_bulk_load/01-create-schema-and-tables.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/sql/buildings_bulk_load/03-alter_relationships_create_view.sql; >&2
    psql -f ${SCRIPTSDIR}/sql/buildings_bulk_load/03-alter_relationships_create_view.sql $ON_ERROR_STOP
fi

if [ "${WITH_PLUGIN_SETUP}" = true ]; then
    psql -c "DROP SCHEMA IF EXISTS admin_bdys CASCADE;"
    echo ${SCRIPTSDIR}/tests/testdata/create_test_admin_bdys_schema.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/create_test_admin_bdys_schema.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/admin_bdys.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/admin_bdys.sql $ON_ERROR_STOP
    psql -c "DROP SCHEMA IF EXISTS aerial_lds CASCADE;"
    echo ${SCRIPTSDIR}/tests/testdata/create_test_aerial_schema.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/create_test_aerial_schema.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/aerial_lds.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/aerial_lds.sql $ON_ERROR_STOP

    # Execute schema and table files
    for s in buildings_common buildings_reference buildings buildings_bulk_load buildings_lds
    do
        for file in ${SCRIPTSDIR}/sql/"$s"/*.sql; do
            echo ${file} >&2
            psql -f ${file} $ON_ERROR_STOP
            psql_exit
        done
    done
fi

if [ "${WITH_TEST_DATA}" = false ] && [ "${WITH_PLUGIN_SETUP}" = false ]; then
    # Execute schema and table files
    for s in buildings_common buildings_reference buildings buildings_bulk_load buildings_lds
    do
        for file in ${SCRIPTSDIR}/sql/"$s"/*.sql; do
            echo ${file} >&2
            psql -f ${file} $ON_ERROR_STOP
            psql_exit
        done
    done
fi

# execute function files
for s in buildings_common buildings_reference buildings buildings_bulk_load buildings_lds
do
    for file in ${SCRIPTSDIR}/sql/"$s"/functions/*.sql; do
        echo ${file} >&2
        psql -f ${file} $ON_ERROR_STOP
        psql_exit
    done
done

# Create Test Data
if [ "${WITH_TEST_DATA}" = true ]; then
    echo ${SCRIPTSDIR}/tests/testdata/db/buildings_reference.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/buildings_reference.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/buildings_common.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/buildings_common.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/buildings.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/buildings.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/buildings_bulk_load.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/buildings_bulk_load.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/db/buildings_lds.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/db/buildings_lds.sql $ON_ERROR_STOP
    echo ${SCRIPTSDIR}/tests/testdata/update_sequences_pgtap_db.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/update_sequences_pgtap_db.sql $ON_ERROR_STOP

fi

# Execute files that are needed to test the plugin - test data remains in database
if [ "${WITH_PLUGIN_SETUP}" = true ]; then
    # Execute all files in the test data sql dir
    echo ${SCRIPTSDIR}/tests/testdata/01-insert_test_data_reference.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/01-insert_test_data_reference.sql $ON_ERROR_STOP
    psql_exit
    echo ${SCRIPTSDIR}/tests/testdata/06-insert_test_data_buildings_bulk_load_plugin.sql >&2
    psql -f ${SCRIPTSDIR}/tests/testdata/06-insert_test_data_buildings_bulk_load_plugin.sql $ON_ERROR_STOP
    psql_exit
    psql -c "SELECT buildings_bulk_load.compare_building_outlines(2);"

fi
